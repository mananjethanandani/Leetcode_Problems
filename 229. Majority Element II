Problem URL: https://leetcode.com/problems/majority-element-ii/

** Solution 1: Optimal Solution O(n) time and O(1) space complexities **

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
    
        int num1 = INT_MIN;
        int num2 = INT_MIN;
        int cnt1 = 0;
        int cnt2 = 0;
        int n = nums.size();
        vector<int> result;
        
        for(int i = 0; i < n; i++){
            int el = nums[i];
            
            if(el == num1) cnt1++;
            else if(el == num2) cnt2++;
            else if(cnt1 == 0){
                num1 = el;
                cnt1 = 1;
            }
            else if(cnt2 == 0){
                num2 = el;
                cnt2 = 1;
            }
            else{
                cnt1--;
                cnt2--;
            }
            
        }
        
        int cnt_confirm1 = 0, cnt_confirm2 = 0;
        
        for(int i = 0; i < n; i++){
            if(nums[i] == num1){
                cnt_confirm1++;
            }
            
            if(nums[i] == num2){
                cnt_confirm2++;
            }
        }
        
        if(cnt_confirm1 > n/3){
                result.push_back(num1);
            }
            
            if(cnt_confirm2 > n/3){
                result.push_back(num2);
            }
  
        return result;
    }
};



** Solution 2: Using Map **
// Set is used to store the max element once while iterating the for loop over the array

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
    
        map<int, int> freq;
        set<int> result;
        
        
        int n = nums.size();
        
        for(int i = 0; i < n; i++){
            freq[nums[i]]++;
            
            if(freq[nums[i]] > n/3){
                result.insert(nums[i]);
            }
        }
        
        vector<int> finalResult(result.begin(), result.end());
        return finalResult;
        
    }
};
